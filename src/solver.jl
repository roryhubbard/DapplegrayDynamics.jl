struct DiscreteTrajectory{T}
    time::AbstractVector{T}
    timesteps::AbstractVector{T}
    knotpoints::AbstractVector{T}
    knotpointsize::Int
    nstates::Int
    function(time::AbstractVector{T}, timesteps::AbstractVector{T}, knotpoints::AbstractVector{T}, knotpointsize::Int, nstates::Int) where {T}
        @assert length(time) == length(timestemp) == length(knotpoints) / knotpointsize  "length(time) == length(timesteps) == length(knotpoints) / knotpointsize must hold true"
        new{T}(time, timesteps, knotpoints, knotpointsize, nstates)
    end
end

time(traj::DiscreteTrajectory{T}) where {T} = traj.time
timesteps(traj::DiscreteTrajectory{T}) where {T} = traj.timesteps
knotpoints(traj::DiscreteTrajectory{T}) where {T} = traj.knotpoints
function knotpoints(traj::DiscreteTrajectory{T}, idx::UnitRange{Int}) where {T}
    idx‚ÇÄ = (idx[1] - 1) * knotpointsize(traj) + 1
    idx‚ÇÅ = (idx[end] - 1) * knotpointsize(traj) - 1
    knotpoints[idx‚ÇÄ:idx‚ÇÅ]
end
knotpointsize(traj::DiscreteTrajectory{T}) where {T} = traj.knotpointsize
nstates(traj::DiscreteTrajectory{T}) where {T} = traj.nstates

function initialize_trajectory(mechanism::Mechanism{T}, tf::T, Œît::T, nu::Int) where {T}
    ts, qs, vs = simulate_mechanism(mechanism, tf, Œît, zeros(T, 2), zeros(T, 2))

    N  = length(ts)
    nx = num_positions(con.mechanism) + num_velocities(con.mechanism)
    knotpointsize = nx + nu
    num_decision_variables = N * knotpointsize
    zero_control_vector = zeros(nu)

    timesteps = Vector{T}(Œît, N)
    knotpoints = Vector{T}(undef, num_decision_variables)

    for i in 1:N
        idx‚ÇÄ = (i - 1) * knotpointsize + 1
        idx‚ÇÅ = idx‚ÇÄ + knotpointsize - 1
        knotpoint  = [qs[i]; vs[i]; zero_control_vector]
        knotpoints[idx‚ÇÄ:idx‚ÇÅ] = knotpoint
    end

    DiscreteTrajectory(ts, timesteps, knotpoints, knotpointsize, nx)
end

function num_lagrange_multipliers(constraints::AbstractVector{<:AdjacentKnotPointsFunction})
    result = 0
    for constraint ‚àà constraints
        result += outputdim(constraint) * length(indices(constraint))
    end
    result
end

struct Problem{T}
    mechanism::Mechanism{T}
    objectives::AbstractVector{<:AdjacentKnotPointsFunction}
    equality_constraints::AbstractVector{<:AdjacentKnotPointsFunction}
    inequality_constraints::AbstractVector{<:AdjacentKnotPointsFunction}
    knotpoint_trajectory::DiscreteTrajectory{T}
end
function objectives(problem::Problem)
    problem.objectives
end
function equality_constraints(problem::Problem)
    problem.equality_constraints
end
function inequality_constraints(problem::Problem)
    problem.inequality_constraints
end
function knotpoints(problem::Problem)
    problem.knotpoints
end

function evaluate_objective(objectives::AbstractVector{<:AdjacentKnotPointsFunction}, knotpoints::DiscreteTrajectory{T}) where {T}
    result = 0.0
    for objective ‚àà objectives
        result += objective(::Sum, knotpoints)
    end
    result
end

function evaluate_constraints(constraints::AbstractVector{<:AdjacentKnotPointsFunction}, knotpoints::DiscreteTrajectory{T}) where {T}
    # TODO: preallocate before here
    result = Vector{T}()
    for constraint in constraints
        val = constraint(::Concatenate, knotpoints)
        append!(result, val)
    end
    return result
end

struct SQP{T}
end

function solve!(solver::SQP{T}, problem::Problem{T}) where {T}
    v = zeros(num_lagrange_multipliers(equality_constraints(problem)))
    println("v: ", v)

    Œª = zeros(num_lagrange_multipliers(inequality_constraints(problem)))
    println("Œª: ", Œª)

    for k = 1:1 # TODO: repeat until convergence criteria is met
        f‚Çñ = evaluate_objective(objectives(problem), knotpoints(problem))
        println("f‚Çñ: ", f‚Çñ)

        h‚Çñ = evaluate_constraints(equality_constraints(problem), knotpoints(problem))
        println("h‚Çñ: ", h‚Çñ)

        g‚Çñ = evaluate_constraints(inequality_constraints(problem), knotpoints(problem))
        println("g‚Çñ: ", h‚Çñ)

        ‚ñΩf_vstacked = gradient(objectives(problem), knotpoints(problem))
        println("‚ñΩf_vstacked: ", Matrix(‚ñΩf_vstacked))

        Jh = jacobian(equality_constraints(problem), knotpoints(problem))
        println("Jh: ", Jh)

        Jg = jacobian(inequality_constraints(problem), knotpoints(problem))
        println("Jg: ", Matrix(Jg))

#        ‚Ñí = build_lagrangian(ùíá, ùíâ, ùíà, ùíó, ùùÄ)
#        ‚ñΩ‚Çìùíá = gradient(ùíá)
#        ùë±‚Çìùíâ = jacobian(ùíâ)
#        ùë±‚Çìùíà = jacobian(ùíà)
#        # ‚ñΩ‚Çì‚Ñí = gradiant(‚Ñí)
#        ‚ñΩ‚Çì‚Ñí = ‚ñΩ‚Çìùíá + ùë±‚Çìùíâ'ùíó + ùë±‚Çìùíà'ùùÄ
#        ‚ñΩ¬≤‚Çì‚Çì‚Ñí = hessian(‚ñΩ‚Çì‚Ñí)
#
#        """
#        Solve QP using Clarabel
#
#        minimize   1‚ÅÑ2ùíô·µÄùë∑ùíô + ùíí·µÄùíô
#        subject to  ùë®ùíô + ùíî = ùíÉ
#                         ùíî ‚àà ùë≤
#        with decision variables ùíô ‚àà ‚Ñù‚Åø, ùíî ‚àà ùë≤ and data matrices ùë∑ = ùë∑·µÄ ‚â• 0,
#        ùíí ‚àà ‚Ñù‚Åø, ùë® ‚àà ‚Ñù·µêÀ£‚Åø, and b ‚àà ‚Ñù·µê. The convext set ùë≤ is a composition of convex cones.
#        """
#        ùë∑ = sparse(‚ñΩ¬≤‚Çì‚Çì‚Ñí)
#        ùíí = sparse(‚ñΩ‚Çì‚Ñí)
#        ùë® = sparse([ùë±‚Çìùíâ;
#                    ùë±‚Çìùíà;
#                    ])
#        ùíÉ = [-ùíâ;
#             -ùíà]
#        ùë≤ = [
#            Clarabel.ZeroConeT(length(ùíâ)),
#            Clarabel.NonnegativeConeT(length(ùíà))]
#
#        settings = Clarabel.Settings()
#        solver   = Clarabel.Solver()
#        Clarabel.setup!(solver, ùë∑, ùíí, ùë®, ùíÉ, ùë≤, settings)
#        result = Clarabel.solve!(solver)
#        ùö´ùíô‚Çñ‚Çä‚ÇÅ, ùíó‚Çñ‚Çä‚ÇÅ, ùùÄ‚Çñ‚Çä‚ÇÅ = unpack_result(result)
#
#        nudge_ùíô!(solver, ùö´ùíô‚Çñ‚Çä‚ÇÅ)
#        set_ùíó!(solver, ùíó‚Çñ‚Çä‚ÇÅ)
#        set_ùùÄ!(solver, ùùÄ‚Çñ‚Çä‚ÇÅ)
    end
end
